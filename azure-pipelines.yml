# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'Ubuntu-16.04'

steps:
- template: ci/azure-install-rust.yml
- template: ci/azure-install-node.yml
- script: echo Hello, world!
  displayName: 'Run a one-line script'
- script: cargo install wasm-bindgen-cli
- task: 1ESLighthouseEng.PipelineArtifactCaching.RestoreCacheV1.RestoreCache@1
  inputs:
    keyfile: '**/yarn.lock, !**/node_modules/**/yarn.lock, !**/.*/**/yarn.lock'
    targetfolder: '**/node_modules, !**/node_modules/**/node_modules'
    vstsFeed: '$(ArtifactFeed)'
- script: cd backends/conrod_crayon/tools/wasm-template && npm install
- task: 1ESLighthouseEng.PipelineArtifactCaching.SaveCacheV1.SaveCache@1
  inputs:
    keyfile: '**/yarn.lock, !**/node_modules/**/yarn.lock, !**/.*/**/yarn.lock'
    targetfolder: '**/node_modules, !**/node_modules/**/node_modules'
    vstsFeed: '$(ArtifactFeed)'
- script: cd backends/conrod_crayon/tools/wasm-template && npm ls | grep webpack
  displayName: webpack version
- script: backends/conrod_crayon/tools/wasm-template/run.sh crayon
- task: AzureRmWebAppDeployment@3
  inputs:
    azureSubscription: 'Free Trial'
    WebAppName: 'conrod'
    Package: '$(System.DefaultWorkingDirectory)/backends/conrod_crayon/tools/wasm-template'
    GenerateWebConfig: true
    WebConfigParameters: '-Handler iisnode -NodeStartFile app.js -appType node'

